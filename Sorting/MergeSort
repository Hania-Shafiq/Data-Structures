#include<iostream>
#include<vector>
using namespace std;
//Function to  merge two sorted halves
vector<int> merge(const vector<int>& left,const vector<int>& right){
    vector<int> merged; //vector to hold the merged result
    int leftIndex=0; //index for left half
    int rightIndex=0; //index for right half
    //Merge the two halves
    while(leftIndex<left.size() && rightIndex<right.size()){
        if(left[leftIndex]<=right[rightIndex]){
            merged.push_back(left[leftIndex]);
            leftIndex++;
        }
        else{
            merged.push_back(right[rightIndex]);
            rightIndex++;
        }
    }
    
    //appending if some element left in the left half or roght half
    while(leftIndex<left.size()){
        merged.push_back(left[leftIndex]);
        leftIndex++;
    }
    while(rightIndex<right.size()){
        merged.push_back(right[rightIndex]);
        rightIndex++;
    }
    return merged;
}
//merge sort function 
vector<int> mergeSort(const vector<int>& arr){
    //base case if vector size is 1 or less its already sorted.
    if(arr.size()<=1){
        return arr;
    }
    //finding mid index of vector.
    int mid=arr.size()/2;
    //spliting to left and right halves 
    vector<int> leftHalf(arr.begin(),arr.begin()+mid); //exclude last element(mid)
    vector<int> rightHalf(arr.begin()+mid,arr.end());// mid element is in right half
    return merge(mergeSort(leftHalf),mergeSort(rightHalf)); //merging
}
// Function to print the array
void printArray(const vector<int>& arr) {
    for (int val : arr) {
        cout << val << " ";
    }
    cout << endl;
}
int main(){
    vector<int> myList={15,2,7,9,22}; //input array
    vector<int> sortedList= mergeSort(myList); //sorting the list
    cout <<"Sorted Array: ";
    printArray(sortedList);
    return 0;
}
